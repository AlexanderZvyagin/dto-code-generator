#!/usr/bin/env python3

import argparse, os

import importlib
import importlib.machinery
import importlib.util

from cgdto import *

def main():
    parser = argparse.ArgumentParser (
        prog        = 'Code Generator for Data Transfer Objects (cgdto)',
        description = '''
Command line interface (CLI) for generation of data transfer objects (DTOs).
''',
        epilog      = '---   ---   ---'
    )

    parser.add_argument('--version', action='version', version=f'%(prog)s {version()}')

    parser.add_argument(
        '--languages',
        type    = str,
        default = 'cpp,python,typescript',
        help    = 'Comma separated list of languages. (default: all known languages: %(default)s)'
    )

    parser.add_argument(
        '--output',
        type    = str,
        default = 'output',
        help    = 'Output directory. (default: %(default)s)'
    )

    parser.add_argument(
        '--schema',
        type    = str,
        help    = 'DTO schema.'
    )

    parser.add_argument(
        '--run-tests',
        action  = 'store_true',
        help    = 'Run automatic tests.'
    )

    args = parser.parse_args()

    if not args.schema:
        print('Need --schema option for more work')
        return

    if 1:
        loader = importlib.machinery.SourceFileLoader( 'schema', args.schema )
        spec = importlib.util.spec_from_loader( 'schema', loader )
        user_module = importlib.util.module_from_spec( spec )
        loader.exec_module( user_module )
        objs = user_module.schema()
        structs = [o for o in objs if isinstance(o,Struct)]
        funcs   = [o for o in objs if isinstance(o,Function)]
        cblocks = [o for o in objs if isinstance(o,CodeBlock)]
        print(f'The schema "{args.schema}" has {len(objs)} objects:  {len(structs)} structs, {len(funcs)} functions and {len(cblocks)} code blocks')

    languages = args.languages.split(',')

    options = {
        'outdir':f'{args.output}',
        'schema_version':user_module.schema_version()
    }

    code = {}
    for lang in languages:
        code[lang] = supported_languages[lang] (options)
        code[lang].Process(objs)

    if args.run_tests:
        for lang1 in languages:
            if not code[lang1].test_environment_ready:
                print(f'Language "{lang1}" has no run test environment')
                continue
            for lang2 in languages:
                if not code[lang1].test_environment_ready:
                    continue
                code[lang1].RunTests(code[lang2],objs)

if __name__ == '__main__':
    main()
