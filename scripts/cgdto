#!/usr/bin/env python3

import argparse, os

import importlib
import importlib.machinery
import importlib.util

from cgdto import *

def main():
    parser = argparse.ArgumentParser (
        prog        = 'Code Generator for Data Transfer Objects (cgdto)',
        description = '''
Command line interface (CLI) for generation of data transfer objects (DTOs).
''',
        epilog      = '---   ---   ---'
    )

    parser.add_argument('--version', action='version', version=f'%(prog)s {version()}')

    parser.add_argument(
        '--languages',
        type    = str,
        default = 'cpp,python,typescript',
        help    = 'Comma separated list of languages. (default: all known languages: %(default)s)'
    )

    parser.add_argument(
        '--output',
        type    = str,
        default = 'output',
        help    = 'Output directory. (default: %(default)s)'
    )

    parser.add_argument(
        '--schema',
        type    = str,
        help    = 'DTO schema.'
    )

    # parser.add_argument(
    #     '--write-tests',
    #     action  = 'store_true',
    #     help    = 'Create automatic tests.'
    # )

    # parser.add_argument(
    #     '--run-tests',
    #     type    = bool,
    #     action  = 'store_true',
    #     help    = 'Run automatic tests.'
    # )

#     parser.add_argument(
#         '--create-test-environment',
#          action='store_true',
#          help    = '''
# Create a test environemnt in the directory of --test.
# For each language in --languages the scrupt will create
# a subdirectoy (e.g. 'output/cpp', 'output/python', 'output/typescript')
# where the tests can be run.
# '''
#     )

    args = parser.parse_args()

    if not args.schema:
        print('Need --schema option for more work')
        return

    if 1:
        loader = importlib.machinery.SourceFileLoader( 'schema', args.schema )
        spec = importlib.util.spec_from_loader( 'schema', loader )
        user_module = importlib.util.module_from_spec( spec )
        loader.exec_module( user_module )
        objs = user_module.schema()
        structs = [o for o in objs if isinstance(o,Struct)]
        funcs   = [o for o in objs if isinstance(o,Function)]
        cblocks = [o for o in objs if isinstance(o,CodeBlock)]
        print(f'The schema "{args.schema}" has {len(objs)} objects:  {len(structs)} structs, {len(funcs)} functions and {len(cblocks)} code blocks')

    languages = args.languages.split(',')

    if 1:
        for lang in languages:

            lang_dir_run_tests   = f'{args.output}/{name_dto_run_tests}/{lang}'
            lang_dir_dto         = f'{lang_dir_run_tests}/../../{name_dto}/{lang}'
            lang_dir_tests       = f'{lang_dir_run_tests}/../../{name_dto_tests}/{lang}'

            os.makedirs(lang_dir_run_tests,exist_ok=True)
            os.makedirs(lang_dir_dto,exist_ok=True)
            os.makedirs(lang_dir_tests,exist_ok=True)

            func_name = f'create_test_env_{lang}'
            func = globals().get(func_name)
            if not func:
                raise Exception(f'Not found: {func_name}')
            func(lang_dir_run_tests,lang_dir_dto,lang_dir_tests)

            write_objs(lang_dir_dto,lang_dir_tests,lang,objs,user_module.schema_version())

    for lang1 in languages:
        for lang2 in languages:
            print(f'Testing: {lang1} {lang2}')
            run_round_trip_tests(lang1,lang2,objs,f'{args.output}/{name_dto_run_tests}')

if __name__ == '__main__':
    main()
