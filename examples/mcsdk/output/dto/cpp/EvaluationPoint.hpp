#pragma once
// 
// https://github.com/AlexanderZvyagin/dto-code-generator
// Generated by CODE GENERATOR OF DATA TRANSFER OBJECTS (cgdto) version 0.8.0
// 
// Generated from schema: MonteCarlo SDK version (0.6.4-dev-versioning)
// 


#include <optional>
#include <string>
#include <vector>
#include <map>
#include <stdexcept>
#include <cmath>

#include <nlohmann/json.hpp>
using json = nlohmann::json;


#include "Histogram.hpp"
namespace dto {
class EvaluationPoint;
std::string EvaluationPoint_to_json_string(const EvaluationPoint &obj);
class EvaluationPoint {
public:

    float time;
    std::optional<std::vector<Histogram>> histograms;

    
    EvaluationPoint (
        float time = NAN,
        std::optional<std::vector<Histogram>> histograms = {}
    )
    : time (
        time
    )
    , histograms (
        histograms
    )
    {
    }

    int GetTime (
    ) const
    {
        
        return time;
        
    }

    EvaluationPoint & Add (
        Histogram histogram
    )
    {
        
        if( not histograms.has_value() )
            histograms = std::vector<Histogram> ();
        histograms.value().push_back(histogram);
        return *this;
        
    }

    bool operator == (const EvaluationPoint &other) const {
        if (time != other.time) return false;
        if (histograms != other.histograms) return false;
        return true;
    }
    bool operator != (const EvaluationPoint &other) const {return not(*this==other);}
    std::string json (void) const {
        return EvaluationPoint_to_json_string(*this);
    }
}; // EvaluationPoint
inline
void to_json(json &j, const EvaluationPoint &obj) try {
    j = json::object();
    j["time"] = obj.time;
    if(obj.histograms.has_value())
        j["histograms"] = obj.histograms.value();
} catch (const std::exception &e) {
    std::throw_with_nested(std::runtime_error("void to_json(json &j, const EvaluationPoint &obj) exception"));
}

inline
std::string EvaluationPoint_to_json_string(const EvaluationPoint &obj) {
    json j;
    to_json(j,obj);
    return j.dump();
}
inline
void from_json(const json &j, EvaluationPoint &obj) try {
    j.at("time").get_to(obj.time);
    if(auto it=j.find("histograms"); it!=j.end() and !it->is_null())
        obj.histograms = *it;
} catch (const std::exception &e) {
    std::throw_with_nested(std::runtime_error("void from_json(const json &j, EvaluationPoint &obj) exception"));
}
inline
EvaluationPoint EvaluationPoint_from_json(const json &j) {
    EvaluationPoint obj;
    from_json(j,obj);
    return obj;
}
} // namespace dto

